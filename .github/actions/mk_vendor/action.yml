name: mk_vendor
description: build a PUT vendor library

inputs:
  vendor:
    description: 'The vendor library name (e.g. "openssl" or "wolfssl")'
    required: true
  preset:
    description: 'The name of the configuration preset (e.g. "openssl111j")'
    required: true
  options:
    description: 'A comma-separated list of additional build options (e.g. "sancov,asan")'
    required: false
    default: ''
  patches:
    description: 'A comma-separated list of patches to apply to the sources'
    required: false
    default: ''
  name:
    description: 'The name of the resulting PUT vendor library'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: compute configuration hash
      id: compute-hash
      shell: bash
      run: |
        #!/usr/bin/env bash
        SCRIPTS=${{ hashFiles(format('puts/vendor/configs/{0}.toml',inputs.vendor), format('puts/vendor/{0}/**',inputs.vendor), format('puts/harness/**')) }}
        CONFUID=$(just mk_vendor "${{ inputs.vendor }}" "${{ inputs.preset }}" "${{ inputs.name }}" "${{ inputs.options }}" "${{ inputs.patches }}" "--quiet --dry-run")

        printf 'scripts=%s\n' "${SCRIPTS}" >> "${GITHUB_OUTPUT}"
        printf 'confuid=%s\n' "${CONFUID}" >> "${GITHUB_OUTPUT}"

    - uses: actions/cache@v4
      id: library-cache
      with:
        key: mk_vendor_cache-${{ runner.os }}-${{ steps.compute-hash.outputs.scripts }}-${{ steps.compute-hash.outputs.confuid }}
        path: |
          vendor/${{ inputs.name }}

    - name: run mk_vendor
      id: library-build
      shell: bash
      run: just mk_vendor "${{ inputs.vendor }}" "${{ inputs.preset }}" "${{ inputs.name }}" "${{ inputs.options }}" "${{ inputs.patches }}"
      if: steps.library-cache.outputs.cache-hit != 'true'
