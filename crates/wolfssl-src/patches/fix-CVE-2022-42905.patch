From f19e7daf5b60e253042600424c18d008c526d828 Mon Sep 17 00:00:00 2001
From: JacobBarthelmeh <jacob@wolfssl.com>
Date: Tue, 11 Oct 2022 13:14:59 -0700
Subject: [PATCH] additional sanity checks on debug callback

---
 examples/client/client.c |  4 ++
 examples/server/server.c |  7 ++++
 src/internal.c           | 84 +++++++++++++++++++++++-----------------
 src/tls13.c              | 35 +++++++++--------
 wolfssl/internal.h       |  3 +-
 wolfssl/test.h           | 20 ++++++++++
 6 files changed, 100 insertions(+), 53 deletions(-)

diff --git a/examples/client/client.c b/examples/client/client.c
index 6e1660472..e7ca8de62 100644
--- a/examples/client/client.c
+++ b/examples/client/client.c
@@ -1843,6 +1843,7 @@ static int client_srtp_test(WOLFSSL *ssl, func_args *args)
 }
 #endif /* WOLFSSL_SRTP */
 
+
 THREAD_RETURN WOLFSSL_THREAD client_test(void* args)
 {
     SOCKET_T sockfd = WOLFSSL_SOCKET_INVALID;
@@ -2930,6 +2931,9 @@ THREAD_RETURN WOLFSSL_THREAD client_test(void* args)
     ctx = wolfSSL_CTX_new_ex(method(heap), heap);
     if (ctx == NULL)
         err_sys("unable to get ctx");
+#ifdef WOLFSSL_CALLBACKS
+    wolfSSL_CTX_set_msg_callback(ctx, msgDebugCb);
+#endif
 
     if (wolfSSL_CTX_load_static_memory(&ctx, NULL, memoryIO, sizeof(memoryIO),
            WOLFMEM_IO_POOL_FIXED | WOLFMEM_TRACK_STATS, 1) != WOLFSSL_SUCCESS) {
diff --git a/examples/server/server.c b/examples/server/server.c
index f3ff44469..ee3ed7aa6 100644
--- a/examples/server/server.c
+++ b/examples/server/server.c
@@ -1368,6 +1368,7 @@ static int server_srtp_test(WOLFSSL *ssl, func_args *args)
 }
 #endif
 
+
 THREAD_RETURN WOLFSSL_THREAD server_test(void* args)
 {
     SOCKET_T sockfd   = WOLFSSL_SOCKET_INVALID;
@@ -2336,6 +2337,9 @@ THREAD_RETURN WOLFSSL_THREAD server_test(void* args)
     if (method != NULL) {
         ctx = SSL_CTX_new(method(NULL));
     }
+#ifdef WOLFSSL_CALLBACKS
+    wolfSSL_CTX_set_msg_callback(ctx, msgDebugCb);
+#endif
 #endif /* WOLFSSL_STATIC_MEMORY */
     if (ctx == NULL)
         err_sys_ex(catastrophic, "unable to get ctx");
@@ -3581,6 +3585,9 @@ exit:
 #ifdef HAVE_SECURE_RENEGOTIATION
     (void) forceScr;
 #endif
+#if defined(WOLFSSL_CALLBACKS) && defined(WOLFSSL_EARLY_DATA)
+    (void) earlyData;
+#endif
 #ifndef WOLFSSL_TIRTOS
     return 0;
 #endif
diff --git a/src/internal.c b/src/internal.c
index 930769152..7d5f20f80 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -9208,7 +9208,7 @@ static int SendHandshakeMsg(WOLFSSL* ssl, byte* input, word32 inputSz,
         }
         if (ssl->toInfoOn) {
             AddPacketInfo(ssl, packetName, handshake,
-                output, outputSz, WRITE_PROTO, ssl->heap);
+                output, outputSz, WRITE_PROTO, 0, ssl->heap);
         }
 #endif
         ssl->fragOffset += fragSz;
@@ -14739,11 +14739,12 @@ static int DoHandShakeMsgType(WOLFSSL* ssl, byte* input, word32* inOutIdx,
     }
 
 #if defined(WOLFSSL_CALLBACKS) || defined(OPENSSL_EXTRA)
-    /* add name later, add on record and handshake header part back on */
+    /* add name later, add the handshake header part back on and record layer
+     * header */
     if (ssl->toInfoOn) {
-        int add = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ;
-        AddPacketInfo(ssl, 0, handshake, input + *inOutIdx - add,
-                      size + add, READ_PROTO, ssl->heap);
+        AddPacketInfo(ssl, 0, handshake, input + *inOutIdx -
+            HANDSHAKE_HEADER_SZ, size + HANDSHAKE_HEADER_SZ, READ_PROTO,
+            RECORD_HEADER_SZ, ssl->heap);
         #ifdef WOLFSSL_CALLBACKS
         AddLateRecordHeader(&ssl->curRL, &ssl->timeoutInfo);
         #endif
@@ -17792,11 +17793,14 @@ static int DoAlert(WOLFSSL* ssl, byte* input, word32* inOutIdx, int* type)
     #if defined(WOLFSSL_CALLBACKS) || defined(OPENSSL_EXTRA)
         if (ssl->hsInfoOn)
             AddPacketName(ssl, "Alert");
-        if (ssl->toInfoOn)
+        if (ssl->toInfoOn) {
             /* add record header back on to info + alert bytes level/code */
-            AddPacketInfo(ssl, "Alert", alert, input + *inOutIdx -
-                          RECORD_HEADER_SZ, RECORD_HEADER_SZ + ALERT_SIZE,
-                          READ_PROTO, ssl->heap);
+            AddPacketInfo(ssl, "Alert", alert, input + *inOutIdx, ALERT_SIZE,
+                          READ_PROTO, RECORD_HEADER_SZ, ssl->heap);
+            #ifdef WOLFSSL_CALLBACKS
+            AddLateRecordHeader(&ssl->curRL, &ssl->timeoutInfo);
+            #endif
+        }
     #endif
 
     if (IsEncryptionOn(ssl, 0)) {
@@ -18815,9 +18819,8 @@ int ProcessReplyEx(WOLFSSL* ssl, int allowSocketErr)
                             AddPacketInfo(ssl, "ChangeCipher",
                                 change_cipher_spec,
                                 ssl->buffers.inputBuffer.buffer +
-                                ssl->buffers.inputBuffer.idx - RECORD_HEADER_SZ -
-                                (ssl->options.dtls ? DTLS_RECORD_EXTRA : 0),
-                                1 + RECORD_HEADER_SZ, READ_PROTO, ssl->heap);
+                                ssl->buffers.inputBuffer.idx,
+                                1, READ_PROTO, RECORD_HEADER_SZ, ssl->heap);
                             #ifdef WOLFSSL_CALLBACKS
                             AddLateRecordHeader(&ssl->curRL, &ssl->timeoutInfo);
                             #endif
@@ -19190,7 +19193,7 @@ int SendChangeCipher(WOLFSSL* ssl)
         if (ssl->hsInfoOn) AddPacketName(ssl, "ChangeCipher");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "ChangeCipher", change_cipher_spec, output,
-                    sendSz, WRITE_PROTO, ssl->heap);
+                    sendSz, WRITE_PROTO, 0, ssl->heap);
     #endif
     ssl->buffers.outputBuffer.length += sendSz;
 
@@ -20106,7 +20109,7 @@ int SendFinished(WOLFSSL* ssl)
         if (ssl->hsInfoOn) AddPacketName(ssl, "Finished");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "Finished", handshake, output, sendSz,
-                          WRITE_PROTO, ssl->heap);
+                          WRITE_PROTO, 0, ssl->heap);
     #endif
 
     ssl->buffers.outputBuffer.length += sendSz;
@@ -20548,7 +20551,7 @@ int SendCertificate(WOLFSSL* ssl)
             AddPacketName(ssl, "Certificate");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "Certificate", handshake, output, sendSz,
-                           WRITE_PROTO, ssl->heap);
+                           WRITE_PROTO, 0, ssl->heap);
     #endif
 
         ssl->buffers.outputBuffer.length += sendSz;
@@ -20744,7 +20747,7 @@ int SendCertificateRequest(WOLFSSL* ssl)
             AddPacketName(ssl, "CertificateRequest");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "CertificateRequest", handshake, output, sendSz,
-                    WRITE_PROTO, ssl->heap);
+                    WRITE_PROTO, 0, ssl->heap);
     #endif
     ssl->buffers.outputBuffer.length += sendSz;
     if (ssl->options.groupMessages)
@@ -20858,7 +20861,7 @@ static int BuildCertificateStatus(WOLFSSL* ssl, byte type, buffer* status,
             AddPacketName(ssl, "CertificateStatus");
         if (ret == 0 && ssl->toInfoOn)
             AddPacketInfo(ssl, "CertificateStatus", handshake, output, sendSz,
-                    WRITE_PROTO, ssl->heap);
+                    WRITE_PROTO, 0, ssl->heap);
     #endif
 
         if (ret == 0) {
@@ -21705,7 +21708,7 @@ static int SendAlert_ex(WOLFSSL* ssl, int severity, int type)
         if (ssl->hsInfoOn)
             AddPacketName(ssl, "Alert");
         if (ssl->toInfoOn)
-            AddPacketInfo(ssl, "Alert", alert, output, sendSz, WRITE_PROTO,
+            AddPacketInfo(ssl, "Alert", alert, output, sendSz, WRITE_PROTO, 0,
                     ssl->heap);
     #endif
 
@@ -23785,17 +23788,22 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
      * type  type of packet being sent
      * data  data bing sent with packet
      * sz    size of data buffer
+     * lateRL  save space for record layer in TimoutInfo struct
      * written 1 if this packet is being written to wire, 0 if being read
      * heap  custom heap to use for mallocs/frees
      */
     void AddPacketInfo(WOLFSSL* ssl, const char* name, int type,
-            const byte* data, int sz, int written, void* heap)
+            const byte* data, int sz, int written, int lateRL, void* heap)
     {
     #ifdef WOLFSSL_CALLBACKS
         TimeoutInfo* info = &ssl->timeoutInfo;
 
         if (info->numberPackets < (MAX_PACKETS_HANDSHAKE - 1)) {
             WOLFSSL_TIMEVAL currTime;
+            int totalSz;
+
+            /* add in space for post record layer */
+            totalSz = sz + lateRL;
 
             /* may add name after */
             if (name) {
@@ -23805,18 +23813,24 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
             }
 
             /* add data, put in buffer if bigger than static buffer */
-            info->packets[info->numberPackets].valueSz = sz;
-            if (sz < MAX_VALUE_SZ)
-                XMEMCPY(info->packets[info->numberPackets].value, data, sz);
+            info->packets[info->numberPackets].valueSz = totalSz;
+            if (totalSz < MAX_VALUE_SZ) {
+                XMEMCPY(info->packets[info->numberPackets].value, data + lateRL,
+                               sz);
+            }
             else {
                 info->packets[info->numberPackets].bufferValue =
-                                    (byte*)XMALLOC(sz, heap, DYNAMIC_TYPE_INFO);
-                if (!info->packets[info->numberPackets].bufferValue)
+                               (byte*)XMALLOC(totalSz, heap, DYNAMIC_TYPE_INFO);
+                if (!info->packets[info->numberPackets].bufferValue) {
                     /* let next alloc catch, just don't fill, not fatal here  */
                     info->packets[info->numberPackets].valueSz = 0;
-                else
-                    XMEMCPY(info->packets[info->numberPackets].bufferValue,
-                           data, sz);
+                }
+                else {
+                    /* copy over data (which has the handshake header), leaving
+                     * room for post record layer header if set */
+                    XMEMCPY(info->packets[info->numberPackets].bufferValue +
+                            lateRL, data, sz);
+                }
             }
             gettimeofday(&currTime, 0);
             info->packets[info->numberPackets].timestamp.tv_sec  =
@@ -23827,7 +23841,7 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
         }
     #endif /* WOLFSSL_CALLBACKS */
     #ifdef OPENSSL_EXTRA
-        if (ssl->protoMsgCb != NULL && sz > RECORD_HEADER_SZ) {
+        if ((ssl->protoMsgCb != NULL) && (sz > 0)) {
             /* version from hex to dec  16 is 16^1, 256 from 16^2 and
                4096 from 16^3 */
             int version = (ssl->version.minor & 0x0F) +
@@ -23836,8 +23850,7 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
                           ((ssl->version.major & 0xF0) << 12);
 
             ssl->protoMsgCb(written, version, type,
-                         (const void *)(data + RECORD_HEADER_SZ),
-                         (size_t)(sz - RECORD_HEADER_SZ),
+                         (const void *)data, (size_t)sz,
                          ssl, ssl->protoMsgCtx);
         }
     #endif /* OPENSSL_EXTRA */
@@ -23846,6 +23859,7 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
         (void)heap;
         (void)type;
         (void)ssl;
+        (void)lateRL;
     }
 
 #endif /* WOLFSSL_CALLBACKS */
@@ -24655,7 +24669,7 @@ static int HashSkeData(WOLFSSL* ssl, enum wc_HashType hashType,
         if (ssl->hsInfoOn) AddPacketName(ssl, "ClientHello");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "ClientHello", handshake, output, sendSz,
-                          WRITE_PROTO, ssl->heap);
+                          WRITE_PROTO, 0, ssl->heap);
 #endif
 
         ssl->options.buildingMsg = 0;
@@ -27964,7 +27978,7 @@ int SendClientKeyExchange(WOLFSSL* ssl)
                 AddPacketName(ssl, "ClientKeyExchange");
             if (ssl->toInfoOn)
                 AddPacketInfo(ssl, "ClientKeyExchange", handshake,
-                            args->output, args->sendSz, WRITE_PROTO, ssl->heap);
+                         args->output, args->sendSz, WRITE_PROTO, 0, ssl->heap);
         #endif
 
             ssl->buffers.outputBuffer.length += args->sendSz;
@@ -28973,7 +28987,7 @@ static int DoSessionTicket(WOLFSSL* ssl, const byte* input, word32* inOutIdx,
             AddPacketName(ssl, "ServerHello");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "ServerHello", handshake, output, sendSz,
-                          WRITE_PROTO, ssl->heap);
+                          WRITE_PROTO, 0, ssl->heap);
     #endif
 
         ssl->options.serverState = SERVER_HELLO_COMPLETE;
@@ -32296,7 +32310,7 @@ static int DoSessionTicket(WOLFSSL* ssl, const byte* input, word32* inOutIdx,
             AddPacketName(ssl, "ServerHelloDone");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "ServerHelloDone", handshake, output, sendSz,
-                    WRITE_PROTO, ssl->heap);
+                    WRITE_PROTO, 0, ssl->heap);
     #endif
         ssl->options.serverState = SERVER_HELLODONE_COMPLETE;
         ssl->options.buildingMsg = 0;
@@ -33424,7 +33438,7 @@ static int DefTicketEncCb(WOLFSSL* ssl, byte key_name[WOLFSSL_TICKET_NAME_SZ],
             AddPacketName(ssl, "HelloVerifyRequest");
         if (ssl->toInfoOn)
             AddPacketInfo(ssl, "HelloVerifyRequest", handshake, output,
-                          sendSz, WRITE_PROTO, ssl->heap);
+                          sendSz, WRITE_PROTO, 0, ssl->heap);
 #endif
 
         /* are we in scr */
diff --git a/src/tls13.c b/src/tls13.c
index dec6d88c4..655934e4e 100644
--- a/src/tls13.c
+++ b/src/tls13.c
@@ -3609,7 +3609,7 @@ int SendTls13ClientHello(WOLFSSL* ssl)
     if (ssl->hsInfoOn) AddPacketName(ssl, "ClientHello");
     if (ssl->toInfoOn) {
         AddPacketInfo(ssl, "ClientHello", handshake, args->output, args->sendSz,
-                      WRITE_PROTO, ssl->heap);
+                      WRITE_PROTO, 0, ssl->heap);
     }
 #endif
 
@@ -5717,7 +5717,7 @@ int SendTls13ServerHello(WOLFSSL* ssl, byte extMsgType)
         AddPacketName(ssl, "ServerHello");
     if (ssl->toInfoOn) {
         AddPacketInfo(ssl, "ServerHello", handshake, output, sendSz,
-                      WRITE_PROTO, ssl->heap);
+                      WRITE_PROTO, 0, ssl->heap);
     }
     #endif
 
@@ -5852,7 +5852,7 @@ static int SendTls13EncryptedExtensions(WOLFSSL* ssl)
         AddPacketName(ssl, "EncryptedExtensions");
     if (ssl->toInfoOn) {
         AddPacketInfo(ssl, "EncryptedExtensions", handshake, output,
-                      sendSz, WRITE_PROTO, ssl->heap);
+                      sendSz, WRITE_PROTO, 0, ssl->heap);
     }
 #endif
 
@@ -5988,7 +5988,7 @@ static int SendTls13CertificateRequest(WOLFSSL* ssl, byte* reqCtx,
             AddPacketName(ssl, "CertificateRequest");
         if (ssl->toInfoOn) {
             AddPacketInfo(ssl, "CertificateRequest", handshake, output,
-                          sendSz, WRITE_PROTO, ssl->heap);
+                          sendSz, WRITE_PROTO, 0, ssl->heap);
         }
     #endif
 
@@ -6734,7 +6734,7 @@ static int SendTls13Certificate(WOLFSSL* ssl)
                 AddPacketName(ssl, "Certificate");
             if (ssl->toInfoOn) {
                 AddPacketInfo(ssl, "Certificate", handshake, output,
-                              sendSz, WRITE_PROTO, ssl->heap);
+                              sendSz, WRITE_PROTO, 0, ssl->heap);
             }
 #endif
 
@@ -7214,7 +7214,8 @@ static int SendTls13CertificateVerify(WOLFSSL* ssl)
                 AddPacketName(ssl, "CertificateVerify");
             if (ssl->toInfoOn) {
                 AddPacketInfo(ssl, "CertificateVerify", handshake,
-                            args->output, args->sendSz, WRITE_PROTO, ssl->heap);
+                            args->output, args->sendSz, WRITE_PROTO, 0,
+                            ssl->heap);
             }
         #endif
 
@@ -8052,7 +8053,7 @@ static int SendTls13Finished(WOLFSSL* ssl)
         if (ssl->hsInfoOn) AddPacketName(ssl, "Finished");
         if (ssl->toInfoOn) {
             AddPacketInfo(ssl, "Finished", handshake, output, sendSz,
-                          WRITE_PROTO, ssl->heap);
+                          WRITE_PROTO, 0, ssl->heap);
         }
     #endif
 
@@ -8254,13 +8255,13 @@ static int SendTls13KeyUpdate(WOLFSSL* ssl)
     if (sendSz < 0)
         return BUILD_MSG_ERROR;
 
-    #ifdef WOLFSSL_CALLBACKS
-        if (ssl->hsInfoOn) AddPacketName(ssl, "KeyUpdate");
-        if (ssl->toInfoOn) {
-            AddPacketInfo(ssl, "KeyUpdate", handshake, output, sendSz,
-                          WRITE_PROTO, ssl->heap);
-        }
-    #endif
+        #if defined(WOLFSSL_CALLBACKS) || defined(OPENSSL_EXTRA)
+            if (ssl->hsInfoOn) AddPacketName(ssl, "KeyUpdate");
+            if (ssl->toInfoOn) {
+                AddPacketInfo(ssl, "KeyUpdate", handshake, output, sendSz,
+                              WRITE_PROTO, 0, ssl->heap);
+            }
+        #endif
 
     ssl->buffers.outputBuffer.length += sendSz;
 
@@ -9327,9 +9328,9 @@ int DoTls13HandShakeMsgType(WOLFSSL* ssl, byte* input, word32* inOutIdx,
 #ifdef WOLFSSL_CALLBACKS
     /* add name later, add on record and handshake header part back on */
     if (ssl->toInfoOn) {
-        int add = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ;
-        AddPacketInfo(ssl, 0, handshake, input + *inOutIdx - add,
-                      size + add, READ_PROTO, ssl->heap);
+        AddPacketInfo(ssl, 0, handshake, input + *inOutIdx -
+            HANDSHAKE_HEADER_SZ, size + HANDSHAKE_HEADER_SZ, READ_PROTO,
+            RECORD_HEADER_SZ, ssl->heap);
         AddLateRecordHeader(&ssl->curRL, &ssl->timeoutInfo);
     }
 #endif
diff --git a/wolfssl/internal.h b/wolfssl/internal.h
index d2833f72d..6465dd6f4 100644
--- a/wolfssl/internal.h
+++ b/wolfssl/internal.h
@@ -4945,7 +4945,8 @@ WOLFSSL_API   void SSL_ResourceFree(WOLFSSL* ssl);   /* Micrium uses */
     WOLFSSL_LOCAL void InitTimeoutInfo(TimeoutInfo* info);
     WOLFSSL_LOCAL void FreeTimeoutInfo(TimeoutInfo* info, void* heap);
     WOLFSSL_LOCAL void AddPacketInfo(WOLFSSL* ssl, const char* name, int type,
-                             const byte* data, int sz, int written, void* heap);
+                             const byte* data, int sz, int written, int lateRL,
+                             void* heap);
     WOLFSSL_LOCAL void AddLateName(const char* name, TimeoutInfo* info);
     WOLFSSL_LOCAL void AddLateRecordHeader(const RecordLayerHeader* rl,
                                            TimeoutInfo* info);
diff --git a/wolfssl/test.h b/wolfssl/test.h
index c0abc7304..1e77f6824 100644
--- a/wolfssl/test.h
+++ b/wolfssl/test.h
@@ -2500,6 +2500,26 @@ static WC_INLINE unsigned int my_psk_client_cs_cb(WOLFSSL* ssl,
 #endif
 #endif /* USE_WINDOWS_API */
 
+#ifdef WOLFSSL_CALLBACKS
+/* only for debug use! */
+static WC_INLINE void msgDebugCb(int write_p, int version, int content_type,
+    const void *buf, size_t len, WOLFSSL *ssl, void *arg)
+{
+    size_t z;
+    byte* pt;
+
+    printf("Version %02X, content type = %d\n", version, content_type);
+    printf("%s ", (write_p)? "WRITING" : "READING");
+    pt = (byte*)buf;
+    printf("DATA [%zu]: ", len);
+    for (z = 0; z < len; z++)
+        printf("%02X", pt[z]);
+    printf("\n");
+
+    (void)arg;
+    (void)ssl;
+}
+#endif /* WOLFSSL_CALLBACKS */
 
 #if defined(HAVE_OCSP) && defined(WOLFSSL_NONBLOCK_OCSP)
 static WC_INLINE int OCSPIOCb(void* ioCtx, const char* url, int urlSz,
-- 
2.34.1

