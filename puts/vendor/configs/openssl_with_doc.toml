[vendor]

# [vendor.name]
#
# The name of the vendor library. Used at various stages to provide sane
# defaults for implicit configuration values and output paths.
name = "openssl"

# [vendor.fetch]
#
# The selected configuration for the `fetch` stage, defining where and how to
# fetch the sources of the vendor library. A matching entry should be defined in
# the [fetch] table.
fetch = "openssl111k"

patch = ["openssl111j", "openssl111k"]

# [vendor.patch]
#
# The list of selected patches-set to apply in the `patch` stage. Each provided
# value should have a matching entry in the [patch] table, listing all the
# patches for this set.
#
# Examples:
#   patch = "claims_openssl10x"
#   patch = ["claims_openssl111", "fix_openssl111_CVE"]
# [vendor.build]
#
# The selected build features to apply in the `build` stage. Each provided value
# should have a matching entry in the [build] table.
#
# Matching entries in each of the selected features will be merged in the order
# given here. This is used to define flags on a per-feature basis and combine
# them here.
#
# Examples:
#   build = ["gcov", "asan"]  # -> cmake_flags = ["-WITH_GCOV", "-WITH_ASAN"]
#
#   [build.gcov]
#   cmake_flags = ["-DWITH_GCOV"]
#
#   [build.asan]
#   cmake_flags = ["-DWITH_ASAN"]
build = ["base"]

# [fetch.<name>]
#
# Each entry in the fetch table represents a specific sources-set, that is how
# to retrieve the source code of the vendor library.
#
# For now, fetching the sources is only available through git:
#   - [fetch.<name>.git] sets the URL to the git repository.
#   - [fetch.<name>.ref] sets the commit ref (named ref or commit hash)
#
# Examples:
#   [fetch]
#   upstream_openssl320  = { git = "https://github.com/openssl/openssl", ref="OpenSSL_3_2_0" }
#   tlspuffin_openssl320 = { git = "https://github.com/tlspuffin/openssl", ref="fuzz-OpenSSL_3_2_0" }
[fetch]
openssl101f = { git = "https://github.com/tlspuffin/openssl", ref = "OpenSSL_1_0_1f" }
openssl102u = { git = "https://github.com/tlspuffin/openssl", ref = "OpenSSL_1_0_2u" }
openssl111j = { git = "https://github.com/tlspuffin/openssl", ref = "fuzz-OpenSSL_1_1_1j" }
openssl111k = { git = "https://github.com/tlspuffin/openssl", ref = "fuzz-OpenSSL_1_1_1k" }
openssl111u = { git = "https://github.com/tlspuffin/openssl", ref = "fuzz-OpenSSL_1_1_1u" }

# [patch.<name>]
#
# Each entry in the patch table is an array of paths to patches that will be
# applied to the vendor library sources before the build stage.
#
# Relative paths are relative to ${MK_VENDOR_PATCH_DIR} which defaults to
# "<tlspuffin_root>/puts/vendor/patches".
#
# Examples:
#   [patch]
#   claims-openssl31x = ["openssl31x/claims.patch"]
#   fix-openssl31x-cve = ["openssl31x/cve_XXXX.patch", "openssl31x/cve_YYYY.patch"]
[patch]
all_CVE = [
  "openssl/fix-cve_a.patch",
  "openssl/fix-cve_b.patch",
  "openssl/fix-cve_c.patch",
]
openssl111j = ["openssl/fix-xyz.patch"]
openssl111k = ["openssl/fix-xyz.patch", "openssl/fix-uvw.patch"]

# [build.<name>]
#
# Each entry in the build table defines a table containing configuration and
# flags to use during the build stage.
#
# Allowed value are:
#   - build.<name>.cmake:
#       The path to the directory containing a cmake build script wrapping the
#       native build of the vendor library.
#
#       Relative paths are relative to ${MK_VENDOR_SCRIPT_DIR} which defaults to
#       "<tlspuffin_root>/puts/vendor/scripts"
#
#   - build.<name>.cmake_flags:
#       Flags passed to the cmake build script.
#
#   Examples:
#     [build.openssl-default]
#     cmake = "openssl"  # -> <tlspuffin_root>/puts/vendor/scripts/openssl/CMakeLists.txt
#     cmake_flags = ["-DCMAKE_C_FLAGS='-O0 -Wcast-align'"]
[build.base]
cmake = "openssl"

[build.asan]
cmake_flags = ["-DWITH_ASAN=ON"]

[build.sancov]
cmake_flags = ["-DWITH_SANCOV=ON"]

[build.gcov]
cmake_flags = ["-DWITH_GCOV=ON"]

[build.llvm_cov]
cmake_flags = ["-DWITH_LLVM_COV=ON"]
